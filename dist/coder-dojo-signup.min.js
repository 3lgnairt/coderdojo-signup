angular.module("coder-dojo-signup",["ui.router","ui.bootstrap"]),function(){function e(e,t,o){}angular.module("coder-dojo-signup").controller("AcceptController",e),e.$inject=["$scope","$rootScope","$state"]}(),function(){function e(e,t,o,r){function n(){}function c(){}function l(){}var a=this;t.$on("Register.CodeValid",function(e,t){a.code=t.code,a.auth=t.auth,a.spotsLeft=t.spotsLeft}),a.auth||(console.log("vm.auth not true"),r.go("closed")),a.form={ninjas:[{}],activities:[{name:"Scratch",selected:!1},{name:"Edison Robots",selected:!1},{name:"LEGO Mindstorm Robots",selected:!1},{name:"Website Development",selected:!1},{name:"Other",selected:!1}]},a.add=n,a.remove=c,a.register=l}angular.module("coder-dojo-signup").controller("FormController",e),e.$inject=["$http","$scope","$rootScope","$state"]}(),function(){function e(e,t,o,r){function n(){function t(e){console.log(e);var t={code:e.data.code,spotsLeft:e.data.spotsLeft,auth:!0};o.$broadcast("Register.CodeValid",t),console.log("params",t),r.go("form")}function n(e){console.log(e),401===e.status?alert("Sorry, that code is invalid, please check that you typed it correctly"):403===e.status?r.go("closed"):r.go("error")}c.code=c.code.trim().toLowerCase(),c.code=c.code.replace(/\s+/g,""),console.log(c.code);var l={method:"POST",url:"/api/validateCodes",header:{"Content-Type":"application/json"},data:{text:c.code}};e(l).then(t,n)}var c=this;c.code="",c.submit=n}angular.module("coder-dojo-signup").controller("RegisterController",e),e.$inject=["$http","$scope","$rootScope","$state"]}(),angular.module("coder-dojo-signup").controller("ViewController",["$scope","$http","$state",function(e,t,o){"use strict";e.ninjaCount=0,e.ninjas={},e.getNinjaCount=function(){return ninjaCount++,ninjaCount},t.get("/api/ninjaList").success(function(t){e.ninjas=t}).error(function(e){})}]),function(){function e(e,t){t.otherwise("/closed"),e.state("register",{url:"/register",templateProvider:["$templateCache",function(e){return e.get("app/register/register.html")}],controller:"RegisterController",controllerAs:"vm"}).state("form",{url:"/form",templateProvider:["$templateCache",function(e){return e.get("app/form/form.html")}],controller:"FormController"}).state("accept",{url:"/accept",templateProvider:["$templateCache",function(e){return e.get("app/accept/accept.html")}],controller:"AcceptController",controllerAs:"vm"}).state("error",{url:"/error",templateProvider:["$templateCache",function(e){return e.get("app/error/error.html")}]}).state("closed",{url:"/closed",templateProvider:["$templateCache",function(e){return e.get("app/closed/closed.html")}]}).state("view",{url:"/view",templateProvider:["$templateCache",function(e){return e.get("app/view/view.html")}],controller:"ViewController"})}angular.module("coder-dojo-signup").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
//# sourceMappingURL=data:application/json;base64,