angular.module("coder-dojo-signup",["ui.router","ui.bootstrap","ui.bootstrap.tpls"]),function(){function e(e,t,o){}angular.module("coder-dojo-signup").controller("AcceptController",e),e.$inject=["$scope","$rootScope","$state"]}(),function(){function e(e,t){function o(){console.log("Spots",s.spotsLeft);var e={firstName:"",lastName:"",birthday:new Date(2008,9,5),under12:!1,activities:[{name:"Scratch",selected:!1},{name:"Edison Robots",selected:!1},{name:"LEGO Mindstorm Robots",selected:!1},{name:"Website Development",selected:!1},{name:"Other",selected:!1}]};s.form.ninjas.length>=s.spotsLeft?alert("Unfortunately there are only "+s.spotsLeft+" spots left for this event. Therefore, you cannot register more than "+s.spotsLeft+" ninjas at this time. Please contact your local Coder Dojo champion if you have any questions"):s.form.ninjas.push(e)}function r(e){var t=s.form.ninjas.indexOf(e);t>=0&&s.form.ninjas.splice(t,1)}function n(e){var t=new Date(2003,9,5),o=Math.abs(t-e.birthday);return 0>o}function a(){function o(e){console.log("submit form success",e),t.go("accept")}function r(e){console.log("submit form err",e),t.go("error")}if(confirm("Is all the information correct? You will not be able to go back and edit it.")){console.log(s.form);for(var a=0;a<s.form.ninjas.length;a++)s.form.ninjas[a].under12=n(s.form.ninjas[a]);var i={method:"POST",url:"/api/registerNinja",header:{"Content-Type":"application/json"},data:{form:s.form,code:s.code}};e(i).then(o,r)}}var s=this;s.auth=t.params.auth,s.code=t.params.code,s.isBw=t.params.code.indexOf("bw")>=0,s.spotsLeft=t.params.spotsLeft,s.auth||(console.log("vm.auth not true"),t.go("register")),s.minDate=new Date(1998,9,5),s.maxDate=new Date(2008,9,5),s.form={ninjas:[{firstName:"",lastName:"",birthday:new Date(2008,9,5),under12:!1,activities:[{name:"Scratch",selected:!1},{name:"Edison Robots",selected:!1},{name:"LEGO Mindstorm Robots",selected:!1},{name:"Website Development",selected:!1},{name:"Other",selected:!1}]}],dojo:s.isBw?"Bankwest":"",bwContact:{firstName:"",lastName:""},parent:{firstName:"",lastName:"",email:"",phone:""},photoPermission:!1,comments:""},s.add=o,s.remove=r,s.register=a}angular.module("coder-dojo-signup").controller("FormController",e),e.$inject=["$http","$state"]}(),angular.module("coder-dojo-signup").controller("ViewController",["$scope","$http","$state",function(e,t,o){"use strict";e.ninjaCount=0,e.ninjas={},e.getNinjaCount=function(){return ninjaCount++,ninjaCount},t.get("/api/ninjaList").success(function(t){e.ninjas=t}).error(function(e){})}]),function(){function e(e,t){function o(){function o(e){console.log(e);var o={code:e.data.code,spotsLeft:e.data.spotsLeft,auth:!0};t.go("form",o)}function n(e){console.log(e),401===e.status?alert("Sorry, that code is invalid, please check that you typed it correctly"):403===e.status?t.go("closed"):t.go("error")}r.code=r.code.trim().toLowerCase(),r.code=r.code.replace(/\s+/g,""),console.log(r.code);var a={method:"POST",url:"/api/validateCodes",header:{"Content-Type":"application/json"},data:{text:r.code}};e(a).then(o,n)}var r=this;r.code="",r.submit=o}angular.module("coder-dojo-signup").controller("RegisterController",e),e.$inject=["$http","$state"]}(),function(){function e(e,t){t.otherwise("/register"),e.state("register",{url:"/register",templateProvider:["$templateCache",function(e){return e.get("app/register/register.html")}],controller:"RegisterController",controllerAs:"vm"}).state("form",{url:"/form",params:{code:"",spotsLeft:0,auth:!1},templateProvider:["$templateCache",function(e){return e.get("app/form/form.html")}],controller:"FormController",controllerAs:"vm"}).state("accept",{url:"/accept",templateProvider:["$templateCache",function(e){return e.get("app/accept/accept.html")}],controller:"AcceptController",controllerAs:"vm"}).state("error",{url:"/error",templateProvider:["$templateCache",function(e){return e.get("app/error/error.html")}]}).state("closed",{url:"/closed",templateProvider:["$templateCache",function(e){return e.get("app/closed/closed.html")}]}).state("view",{url:"/view",templateProvider:["$templateCache",function(e){return e.get("app/view/view.html")}],controller:"ViewController"})}angular.module("coder-dojo-signup").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
//# sourceMappingURL=data:application/json;base64,