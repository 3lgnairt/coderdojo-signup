angular.module("coder-dojo-signup",["ui.router","ui.bootstrap"]),function(){function e(e,t,o){}angular.module("coder-dojo-signup").controller("AcceptController",e),e.$inject=["$scope","$rootScope","$state"]}(),angular.module("coder-dojo-signup").controller("FormController",["$scope","$http","$state",function(e,t,o){"use strict";e.signup={name:"",email:"",ninjaInformation:[{name:"",age:"",laptopRequired:!1}],activities:[{name:"Scratch",selected:!1},{name:"Raspberry Pi",selected:!1},{name:"Edison Robots",selected:!1},{name:"LEGO Mindstorm Robots",selected:!1},{name:"Website Development",selected:!1},{name:"Unity Game Development",selected:!1},{name:"Other",selected:!1}],dietaryConsiderations:""},e.addNinja=function(){e.signup.ninjaInformation.push({name:"",age:"",laptopRequired:!1})},e.removeNinja=function(t){var o=e.signup.ninjaInformation.indexOf(t);o>-1&&e.signup.ninjaInformation.splice(o,1)},e.registerNinja=function(){function r(e){console.log("submit form success",e),o.go("accept")}function n(e){console.log("submit form err",e),o.go("error")}console.log("registering");var a={method:"POST",url:"/api/registerNinja",header:{"Content-Type":"application/json"},data:{form:e.signup,code:"test"}};t(a).then(r,n)}}]),function(){function e(e,t,o,r){function n(){function t(e){console.log(e),r.go("form",{auth:!0})}function o(e){console.log(e),401===e.status?alert("Sorry, that code is invalid, please check that you typed it correctly"):403===e.status?r.go("closed"):r.go("error")}a.code=a.code.trim().toLowerCase(),a.code=a.code.replace(/\s+/g,""),console.log(a.code);var n={method:"POST",url:"/api/validateCodes",header:{"Content-Type":"application/json"},data:{text:a.code}};e(n).then(t,o)}var a=this;a.code="",a.submit=n}angular.module("coder-dojo-signup").controller("RegisterController",e),e.$inject=["$http","$scope","$rootScope","$state"]}(),angular.module("coder-dojo-signup").controller("ViewController",["$scope","$http","$state",function(e,t,o){"use strict";e.ninjaCount=0,e.ninjas={},e.getNinjaCount=function(){return ninjaCount++,ninjaCount},t.get("/api/ninjaList").success(function(t){e.ninjas=t}).error(function(e){})}]),function(){function e(e,t){t.otherwise("/closed"),e.state("register",{url:"/register",templateProvider:["$templateCache",function(e){return e.get("app/register/register.html")}],controller:"RegisterController",controllerAs:"vm"}).state("form",{url:"/form",templateProvider:["$templateCache",function(e){return e.get("app/form/form.html")}],controller:"FormController"}).state("accept",{url:"/accept",templateProvider:["$templateCache",function(e){return e.get("app/accept/accept.html")}],controller:"AcceptController",controllerAs:"vm"}).state("error",{url:"/error",templateProvider:["$templateCache",function(e){return e.get("app/error/error.html")}]}).state("closed",{url:"/closed",templateProvider:["$templateCache",function(e){return e.get("app/closed/closed.html")}]}).state("view",{url:"/view",templateProvider:["$templateCache",function(e){return e.get("app/view/view.html")}],controller:"ViewController"})}angular.module("coder-dojo-signup").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
//# sourceMappingURL=data:application/json;base64,