angular.module("coderdojo-signup",["ui.router","ui.bootstrap","ui.bootstrap.tpls"]),function(){function e(e,t,o){}angular.module("coderdojo-signup").controller("AcceptController",e),e.$inject=["$scope","$rootScope","$state"]}(),function(){function e(e,t){function o(){function o(e){console.log("submit form success",e),i.spotsLeft=e.number,i.spotsLeft<=0&&t.go("closed")}function n(e){console.log("get number of ninjas err",e)}e.get("/api/registerNinja").then(o,n)}function n(){console.log("Spots",i.spotsLeft);var e={firstName:"",lastName:"",birthday:new Date(2008,9,5),under12:!1,activities:[{name:"Scratch",selected:!1},{name:"Edison Robots",selected:!1},{name:"Raspberry Pi",selected:!1},{name:"Game Maker",selected:!1},{name:"LEGO Mindstorm Robots",selected:!1},{name:"Website Development",selected:!1},{name:"Other",selected:!1}]};i.form.ninjas.length>=i.spotsLeft?alert("Unfortunately there are only "+i.spotsLeft+" spots left for this event. Therefore, you cannot register more than "+i.spotsLeft+" ninjas at this time. Please contact your local CoderDojo champion if you have any questions"):i.form.ninjas.push(e)}function r(e){var t=i.form.ninjas.indexOf(e);t>=0&&i.form.ninjas.splice(t,1)}function a(e){var t=new Date(2003,9,5),o=Math.abs(t-e.birthday);return 0>o}function s(){function o(e){console.log("submit form success",e),t.go("accept")}function n(e){console.log("submit form err",e),t.go("error")}if(confirm("Is all the information correct? You will not be able to go back and edit it.")){console.log(i.form);for(var r=0;r<i.form.ninjas.length;r++)i.form.ninjas[r].under12=a(i.form.ninjas[r]);var s={method:"POST",url:"/api/registerNinja",header:{"Content-Type":"application/json"},data:{form:i.form}};e(s).then(o,n)}}var i=this;i.spotsLeft=t.params.spotsLeft,i.minDate=new Date(1998,9,5),i.maxDate=new Date(2008,9,5),i.form={ninjas:[{firstName:"",lastName:"",birthday:new Date(2008,9,5),under12:!1,activities:[{name:"Scratch",selected:!1},{name:"Edison Robots",selected:!1},{name:"Raspberry Pi",selected:!1},{name:"Game Maker",selected:!1},{name:"LEGO Mindstorm Robots",selected:!1},{name:"Website Development",selected:!1},{name:"Other",selected:!1}]}],bwContact:{firstName:"",lastName:""},parent:{firstName:"",lastName:"",email:"",phone:""},photoPermission:!1,comments:""},i.add=n,i.remove=r,i.register=s,o()}angular.module("coderdojo-signup").controller("FormController",e),e.$inject=["$http","$state"]}(),angular.module("coderdojo-signup").controller("ViewController",["$scope","$http","$state",function(e,t,o){"use strict";e.ninjaCount=0,e.ninjas={},e.isUnder12=function(e){var t=Math.abs(e.getTime()-(new Date).getTime()),o=Math.ceil(t/31536e6);return 12>o},e.getNinjaCount=function(){return ninjaCount++,ninjaCount},t.get("/api/ninjaList").success(function(t){e.ninjas=t;for(var o=0;o<e.ninjas.length;o++)for(var n=0;n<e.ninjas[o].ninjas.length;n++)e.ninjas[o].ninjas[n].under12=isUnder12(e.ninjas[o].ninjas[n].birthday)}).error(function(e){})}]),function(){function e(e,t){t.otherwise("/form"),e.state("form",{url:"/form",templateProvider:["$templateCache",function(e){return e.get("app/form/form.html")}],controller:"FormController",controllerAs:"vm"}).state("accept",{url:"/accept",templateProvider:["$templateCache",function(e){return e.get("app/accept/accept.html")}],controller:"AcceptController",controllerAs:"vm"}).state("error",{url:"/error",templateProvider:["$templateCache",function(e){return e.get("app/error/error.html")}]}).state("view",{url:"/view",templateProvider:["$templateCache",function(e){return e.get("app/view/view.html")}],controller:"ViewController"}).state("closed",{url:"/closed",templateProvider:["$templateCache",function(e){return e.get("app/closed/closed.html")}]})}angular.module("coderdojo-signup").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
//# sourceMappingURL=data:application/json;base64,
